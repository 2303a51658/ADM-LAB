{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPLe5yeFnhAtpum/wqKt1OX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303a51658/ADM-LAB/blob/main/Untitled17.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "classified_data = {\n",
        "    'Name': ['John', 'Alice', 'Bob', 'Eve'],\n",
        "    'Date_of_Birth': ['1990-01-01', '1985-05-12', '2000-07-23', '1992-03-15'],\n",
        "    'Category': ['A', 'A', 'B', 'B'],\n",
        "    'Subcategory': ['X', 'Y', 'X', 'Y'],\n",
        "    'Values': [10, 20, 10, 30]\n",
        "}\n",
        "df = pd.DataFrame(classified_data)\n",
        "print(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WPMDzVBIbJKx",
        "outputId": "1b77b2c6-4858-425b-9432-e7d4a4ed1fea"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Name Date_of_Birth Category Subcategory  Values\n",
            "0   John    1990-01-01        A           X      10\n",
            "1  Alice    1985-05-12        A           Y      20\n",
            "2    Bob    2000-07-23        B           X      10\n",
            "3    Eve    1992-03-15        B           Y      30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_encoded = pd.get_dummies(df, columns=['Category', 'Subcategory'])\n",
        "print(df_encoded)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kjtP-n2mbM2R",
        "outputId": "46e6c4b3-d197-4cf1-d23f-21ddc7001b86"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Name Date_of_Birth  Values  Category_A  Category_B  Subcategory_X  \\\n",
            "0   John    1990-01-01      10        True       False           True   \n",
            "1  Alice    1985-05-12      20        True       False          False   \n",
            "2    Bob    2000-07-23      10       False        True           True   \n",
            "3    Eve    1992-03-15      30       False        True          False   \n",
            "\n",
            "   Subcategory_Y  \n",
            "0          False  \n",
            "1           True  \n",
            "2          False  \n",
            "3           True  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "label_encoder = LabelEncoder()\n",
        "df['Category_encoded'] = label_encoder.fit_transform(df['Category'])\n",
        "print(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mtWwWPEsbSZp",
        "outputId": "a9a2b9a6-b35f-40ce-f56b-b9937660a74f"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Name Date_of_Birth Category Subcategory  Values  Category_encoded\n",
            "0   John    1990-01-01        A           X      10                 0\n",
            "1  Alice    1985-05-12        A           Y      20                 0\n",
            "2    Bob    2000-07-23        B           X      10                 1\n",
            "3    Eve    1992-03-15        B           Y      30                 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "\n",
        "df['Date_of_Birth'] = pd.to_datetime(df['Date_of_Birth'])\n",
        "\n",
        "df['Age'] = df['Date_of_Birth'].apply(lambda x: datetime.now().year - x.year)\n",
        "print(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "knpqNWZObX8K",
        "outputId": "895d578e-2862-464f-ba5b-f14e71ce819a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Name Date_of_Birth Category Subcategory  Values  Category_encoded  Age\n",
            "0   John    1990-01-01        A           X      10                 0   35\n",
            "1  Alice    1985-05-12        A           Y      20                 0   40\n",
            "2    Bob    2000-07-23        B           X      10                 1   25\n",
            "3    Eve    1992-03-15        B           Y      30                 1   33\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "pivot_df = pd.pivot_table(df, values='Values', index='Category', columns='Subcategory', aggfunc='sum').reset_index()\n",
        "print(pivot_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f8V4ZXQrblET",
        "outputId": "309f976d-4eda-487b-9422-a6d32770f56b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Subcategory Category   X   Y\n",
            "0                  A  10  20\n",
            "1                  B  10  30\n"
          ]
        }
      ]
    }
  ]
}

{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOZDmil4R+rTX2tm0blENEL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303a51658/ADM-LAB/blob/main/LAB-5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBjEDiWEgv0j",
        "outputId": "ec289c32-f032-4f6b-eac1-aab7e34a85ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "One-Hot Encoded DataFrame:\n",
            "                bread  butter  eggs  milk\n",
            "TransactionID                           \n",
            "1                  1       1     0     1\n",
            "2                  1       1     0     0\n",
            "3                  1       0     0     1\n",
            "4                  0       1     0     1\n",
            "5                  1       1     1     0\n",
            "Frequent Itemsets:\n",
            "     support               itemsets\n",
            "0       0.8                (bread)\n",
            "1       0.8               (butter)\n",
            "2       0.2                 (eggs)\n",
            "3       0.6                 (milk)\n",
            "4       0.6        (butter, bread)\n",
            "5       0.2          (eggs, bread)\n",
            "6       0.4          (bread, milk)\n",
            "7       0.2         (butter, eggs)\n",
            "8       0.4         (butter, milk)\n",
            "9       0.2  (eggs, butter, bread)\n",
            "10      0.2  (butter, bread, milk)\n",
            "Association Rules:\n",
            "        antecedents      consequents  antecedent support  consequent support  \\\n",
            "0         (butter)          (bread)                 0.8                 0.8   \n",
            "1          (bread)         (butter)                 0.8                 0.8   \n",
            "2           (eggs)          (bread)                 0.2                 0.8   \n",
            "3          (bread)           (milk)                 0.8                 0.6   \n",
            "4           (milk)          (bread)                 0.6                 0.8   \n",
            "5           (eggs)         (butter)                 0.2                 0.8   \n",
            "6         (butter)           (milk)                 0.8                 0.6   \n",
            "7           (milk)         (butter)                 0.6                 0.8   \n",
            "8   (butter, eggs)          (bread)                 0.2                 0.8   \n",
            "9    (bread, eggs)         (butter)                 0.2                 0.8   \n",
            "10          (eggs)  (butter, bread)                 0.2                 0.6   \n",
            "11  (butter, milk)          (bread)                 0.4                 0.8   \n",
            "12   (bread, milk)         (butter)                 0.4                 0.8   \n",
            "\n",
            "    support  confidence      lift  representativity  leverage  conviction  \\\n",
            "0       0.6    0.750000  0.937500               1.0     -0.04         0.8   \n",
            "1       0.6    0.750000  0.937500               1.0     -0.04         0.8   \n",
            "2       0.2    1.000000  1.250000               1.0      0.04         inf   \n",
            "3       0.4    0.500000  0.833333               1.0     -0.08         0.8   \n",
            "4       0.4    0.666667  0.833333               1.0     -0.08         0.6   \n",
            "5       0.2    1.000000  1.250000               1.0      0.04         inf   \n",
            "6       0.4    0.500000  0.833333               1.0     -0.08         0.8   \n",
            "7       0.4    0.666667  0.833333               1.0     -0.08         0.6   \n",
            "8       0.2    1.000000  1.250000               1.0      0.04         inf   \n",
            "9       0.2    1.000000  1.250000               1.0      0.04         inf   \n",
            "10      0.2    1.000000  1.666667               1.0      0.08         inf   \n",
            "11      0.2    0.500000  0.625000               1.0     -0.12         0.4   \n",
            "12      0.2    0.500000  0.625000               1.0     -0.12         0.4   \n",
            "\n",
            "    zhangs_metric   jaccard  certainty  kulczynski  \n",
            "0       -0.250000  0.600000  -0.250000    0.750000  \n",
            "1       -0.250000  0.600000  -0.250000    0.750000  \n",
            "2        0.250000  0.250000   1.000000    0.625000  \n",
            "3       -0.500000  0.400000  -0.250000    0.583333  \n",
            "4       -0.333333  0.400000  -0.666667    0.583333  \n",
            "5        0.250000  0.250000   1.000000    0.625000  \n",
            "6       -0.500000  0.400000  -0.250000    0.583333  \n",
            "7       -0.333333  0.400000  -0.666667    0.583333  \n",
            "8        0.250000  0.250000   1.000000    0.625000  \n",
            "9        0.250000  0.250000   1.000000    0.625000  \n",
            "10       0.500000  0.333333   1.000000    0.666667  \n",
            "11      -0.500000  0.200000  -1.500000    0.375000  \n",
            "12      -0.500000  0.200000  -1.500000    0.375000  \n",
            "Support, Confidence, and Lift:\n",
            "        antecedents      consequents  support  confidence      lift\n",
            "0         (butter)          (bread)      0.6    0.750000  0.937500\n",
            "1          (bread)         (butter)      0.6    0.750000  0.937500\n",
            "2           (eggs)          (bread)      0.2    1.000000  1.250000\n",
            "3          (bread)           (milk)      0.4    0.500000  0.833333\n",
            "4           (milk)          (bread)      0.4    0.666667  0.833333\n",
            "5           (eggs)         (butter)      0.2    1.000000  1.250000\n",
            "6         (butter)           (milk)      0.4    0.500000  0.833333\n",
            "7           (milk)         (butter)      0.4    0.666667  0.833333\n",
            "8   (butter, eggs)          (bread)      0.2    1.000000  1.250000\n",
            "9    (bread, eggs)         (butter)      0.2    1.000000  1.250000\n",
            "10          (eggs)  (butter, bread)      0.2    1.000000  1.666667\n",
            "11  (butter, milk)          (bread)      0.2    0.500000  0.625000\n",
            "12   (bread, milk)         (butter)      0.2    0.500000  0.625000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/mlxtend/frequent_patterns/fpcommon.py:161: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import pandas as pd\n",
        "from mlxtend.frequent_patterns import apriori, association_rules\n",
        "\n",
        "\n",
        "data = {'TransactionID': [1, 2, 3, 4, 5],\n",
        "        'Groceries': [['milk', 'bread', 'butter'],\n",
        "                      ['bread', 'butter'],\n",
        "                      ['milk', 'bread'],\n",
        "                      ['milk', 'butter'],\n",
        "                      ['bread', 'butter', 'eggs']]}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df = df.set_index('TransactionID')\n",
        "\n",
        "\n",
        "one_hot_encoded_df = df['Groceries'].str.join('|').str.get_dummies()\n",
        "print(\"One-Hot Encoded DataFrame:\\n\", one_hot_encoded_df)\n",
        "\n",
        "\n",
        "frequent_itemsets = apriori(one_hot_encoded_df, min_support=0.2, use_colnames=True)\n",
        "print(\"Frequent Itemsets:\\n\", frequent_itemsets)\n",
        "\n",
        "\n",
        "rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.5)\n",
        "print(\"Association Rules:\\n\", rules)\n",
        "\n",
        "\n",
        "rules = rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']]\n",
        "print(\"Support, Confidence, and Lift:\\n\", rules)\n"
      ]
    }
  ]
}